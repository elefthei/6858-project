#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <sys/un.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <string.h>
#include <sys/socket.h>
#include <signal.h>
#include <errno.h>
#include <gid_definition.h>

int main(void){
  int sockid=0;
  char *chldsock;
  int chldsockn=sprintf(chldsock,"/tmp/sock-%d", sockid++);

  // CREATE A SOCKET TO PASS STDIN, STDOUT
  int chldfd=socket(AF_UNIX, SOCK_STREAM, 0);

  if (chldfd < 0) 
    ragequit("can't create socket");
  
  struct sockaddr_un chldaddr;
  chldaddr.sun_family = AF_UNIX;
  snprintf(chldaddr.sun_path, chldsockn, "%s", chldsock);
  if (bind(chldfd, (struct sockaddr *) &chldaddr, sizeof(chldaddr)) < 0) {
    fprintf(stderr,"WARNING: cannot bind to socket %s (%s), exiting\n",
	    chldsock, strerror(errno));
    exit(-1);
  }
  
  chown(chldsock,1000,1000);
  chmod(chldsock, 0720); 
  
  
  if(listen(chldfd,SOMAXCONN)!=0)
    ragequit('pald failed to listen on open sock');

  while((connection_fd = accept(ss_fd, (struct sockaddr *) &addr, )) > -1){
    child = fork();
    if(child<0)
      ragequit('fork');
    else if(child == 0){

      dup2(chldfd,1);
      dup2(chldfd,0);
      close(chldfd);

      execlp("/bin/echo", "got connections");
      /* Code below will never happen unless exec fails */
      perror("Couldn't exec");
      exit(1);
    }
  
  return 0;

}
